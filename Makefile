# Image URL used for building and pushing images
IMG ?= controller:latest

# ENVTEST_K8S_VERSION specifies the version of Kubernetes assets for envtest
ENVTEST_K8S_VERSION = 1.29.0

# Helm chart related variables
CHART_NAME = bossnet-operator
CHART_PATH = ./deploy/charts/bossnet-operator
RELEASE_NAME = bossnet-operator
NAMESPACE = bossnet-system
VALUES_FILE = $(CHART_PATH)/values.yaml

# Determine Go binaries install path
ifeq ($(shell go env GOBIN),)
GOBIN := $(shell go env GOPATH)/bin
else
GOBIN := $(shell go env GOBIN)
endif

# Container tool used for building/pushing images (docker/podman)
CONTAINER_TOOL ?= docker

# Tool binaries (can be overridden)
KUBECTL ?= kubectl
KUSTOMIZE ?= kustomize
CONTROLLER_GEN ?= controller-gen
ENVTEST ?= setup-envtest
GOLANGCI_LINT ?= golangci-lint
GINKGO ?= ginkgo

# Set shell options for safer execution
SHELL := /usr/bin/env bash
.SHELLFLAGS := -ec -o pipefail

##@ General

.PHONY: help
help: ## Display this help message.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} \
		/^[a-zA-Z0-9_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } \
		/^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) }' $(MAKEFILE_LIST)

.PHONY: clean
clean: ## Clean environment (envtest binaries and local bin)
	@$(ENVTEST) cleanup $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN)
	@rm -rf $(LOCALBIN)

##@ Development Tools

.PHONY: mise
mise:
	@mise install --yes

.git/hooks/pre-commit:
	@pre-commit install

.PHONY: tools
tools: mise .git/hooks/pre-commit

.PHONY: tools-list
tools-list:
	@mise list --current

##@ Code Generation and Validation

.PHONY: manifests
manifests: tools ## Generate CRDs, Webhooks, ClusterRoles, etc.
	$(CONTROLLER_GEN) crd webhook paths="./..." output:crd:artifacts:config=$(CHART_PATH)/crds

.PHONY: generate
generate: tools ## Generate deepcopy and other autogenerated code
	$(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths="./..."
	@echo "Adding coverage ignore directive to generated deepcopy files..."
	@sed -i '1i\//go:coverage ignore' api/v1/zz_generated.deepcopy.go

.PHONY: fmt
fmt: ## Run go fmt on all Go files
	go fmt ./...

.PHONY: vet
vet: ## Run go vet to catch suspicious constructs
	go vet ./...

##@ Helm

.PHONY: helmbuild
helmbuild: update-chart-deps ## Build Helm dependencies
	helm repo add bitnami https://charts.bitnami.com/bitnami
	helm dependency build $(CHART_PATH)

.PHONY: update-chart-deps
update-chart-deps: ## Update Helm chart dependencies
	helm dependency update $(CHART_PATH)

##@ Testing

GINKGO_OPTIONS ?= -v --skip-package test/e2e -coverprofile cover.out -coverpkg ./api/v1/...,./internal/... -r

.PHONY: test
test: manifests generate fmt vet tools ## Run unit tests with coverage
	KUBEBUILDER_ASSETS="$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path)" \
	$(GINKGO) run $(GINKGO_OPTIONS)

.PHONY: watch
watch: manifests generate fmt vet tools ## Run tests in watch mode
	KUBEBUILDER_ASSETS="$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path)" \
	$(GINKGO) watch $(GINKGO_OPTIONS)

.PHONY: test-e2e
test-e2e: ## Run e2e tests (make sure you have a Kind cluster or similar)
	go test ./test/e2e/ -v -ginkgo.v

##@ Linting

.PHONY: lint
lint: tools ## Run linters (golangci-lint and yamllint)
	$(GOLANGCI_LINT) run

.PHONY: lint-fix
lint-fix: tools ## Run linters and apply automatic fixes
	$(GOLANGCI_LINT) run --fix

##@ Build and Run

.PHONY: build
build: manifests generate fmt vet ## Build the controller binary
	go build -o bin/manager cmd/main.go

.PHONY: run
run: manifests generate fmt vet ## Run controller locally
	go run ./cmd/main.go

.PHONY: docs
docs: tools ## Generate CRD documentation markdown files
	crdoc --resources $(CHART_PATH)/crds/bossnet.io_bossnetservers.yaml --output BossnetServer.md
	crdoc --resources $(CHART_PATH)/crds/bossnet.io_bossnetworkpools.yaml --output BossnetWorkPool.md
	crdoc --resources $(CHART_PATH)/crds/bossnet.io_bossnetdeployments.yaml --output BossnetDeployment.md

##@ Docker Image Build and Push

.PHONY: docker-build
docker-build: ## Build the operator container image
	$(CONTAINER_TOOL) build -t $(IMG) .

.PHONY: docker-push
docker-push: ## Push the operator container image
	$(CONTAINER_TOOL) push $(IMG)

PLATFORMS ?= linux/arm64,linux/amd64,linux/s390x,linux/ppc64le

.PHONY: docker-buildx
docker-buildx: ## Build and push multi-arch container image using buildx
	# Prepare Dockerfile.cross with platform argument
	sed -e '1 s/^FROM/FROM --platform=$${BUILDPLATFORM}/' Dockerfile > Dockerfile.cross
	- $(CONTAINER_TOOL) buildx create --name bossnet-builder
	$(CONTAINER_TOOL) buildx use bossnet-builder
	- $(CONTAINER_TOOL) buildx build --push --platform=$(PLATFORMS) --tag $(IMG) -f Dockerfile.cross .
	- $(CONTAINER_TOOL) buildx rm bossnet-builder
	rm Dockerfile.cross

##@ Deployment

.PHONY: install
install: manifests tools ## Install CRDs in Kubernetes cluster
	$(KUBECTL) apply -f '$(CHART_PATH)/crds/*.yaml'

.PHONY: uninstall
uninstall: manifests tools ## Uninstall CRDs from Kubernetes cluster
	$(KUBECTL) delete --ignore-not-found=true -f '$(CHART_PATH)/crds/*.yaml'

.PHONY: deploy
deploy: helmbuild ## Deploy Helm chart (includes CRDs and operator)
	helm install $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--values $(VALUES_FILE)

.PHONY: undeploy
undeploy: ## Uninstall Helm chart and operator
	helm uninstall $(RELEASE_NAME) --namespace $(NAMESPACE)

##@ Local bin directory for envtest and tools

LOCALBIN ?= $(shell pwd)/bin

$(LOCALBIN):
	mkdir -p $(LOCALBIN)
